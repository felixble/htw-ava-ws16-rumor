@startuml
!include style.puml

EndpointManager --left---- ServerLogic
Server --right---- ServerLogic

ServerLogic --- VectorClock

ServerLogic <|-- ElectionNode
ServerLogic <|-- ObserverNode

ElectionNode <|-- Voter
ElectionNode <|-- Candidate

ElectionNode --right---- SnapshotReceiver
ObserverNode --left---- SnapshotAlgorithm
ElectionNode --right---- RumorAlgorithm
ElectionNode --left---- EchoAlgorithm

EchoStates -- EchoAlgorithm

EndpointParser -- EndpointManager
GraphvizParser -- EndpointManager

Voter -- ConfidenceLevel

class RumorAlgorithm {
    async initiateRumorDistribution(msg)
    async processIncomingMessage(msg, neighborId)
}

class EchoAlgorithm {
    async initEcho(content, onEchoDistributed)
    async processIncomingMsg(msg, neighborId)
}

class SnapshotAlgorithm {
    async takeSnapshot()
    async processIncomingMessage(msg, senderId)
}

class SnapshotReceiver {
    async processIncomingMessage(msg)
}

class ConfidenceLevel {
    isFavorite(candidateId)
    updateLevelOnNewChooseMeMsg(candidateId)
    updateLevelOnNewCampaign(candidateId)
}

class EndpointManager {
    myId
    myEndpoint
    myNeighbors
    endpoints
}

class ServerLogic {
    onReceiveData()
    _runAlgorithm(data, socket)
}

class ElectionNode {
    _runAlgorithm(data, socket)
    async sendCampaignMsgTo(neighbor, msg)
    async sendChooseMeMsgTo(neighbor, msg)
    async sendSnapshotResponse(node, msg)
}

class Candidate {
    _runAlgorithm(data, socket)
}

class Voter {
    onNewIncomingChooseMeMsg(candidateId, currentRumorId)
    onNewIncomingCampaignMsg(candidateId)
}

class Server {
    listen(callback)
    close()
}

class EndpointParser {
}

class GraphvizParser {
}

class VectorClock {
    myId
    vector : VectorTimeElement[]
    constructor(myId)
    tick()
    update(clock)
    getMyTime()
    getTimeFor(id)
}



@enduml